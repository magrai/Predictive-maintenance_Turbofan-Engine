x_full$idx_normal <- idx_normal
x_full$idx_warn <- idx_warn
x_full$idx_alarm <- idx_alarm
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit, idx_alarm) %>%
#mutate(time2 = 1:n()) %>%
mutate(Time2 = min(Time))
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit, idx_alarm) %>%
#mutate(time2 = 1:n()) %>%
mutate(Time2 = min(Time[idx_alarm == 1]))
dt1 <- data.frame(x=c("1","1","1","1","1","1","1","1","1","1","2","2","2","2","2","2","2","2","2","2"),
x2=c("1","1","2","2","2","2","3","3","3","3","1","1","2","2","2","2","3","3","3","3"),
y=c(1.41,1.39,1.9,2.1,0.9,1.1,3.1,2.9,3.9,4.1,0.9,1.1,1.9,2.1,0.9,1.1,3.1,2.9,3.9,4.1))
dt1
dt1 %>%
group_by(x) %>%
mutate(a=mean(y[x2==1]), z=y/a)
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit) %>%
#mutate(time2 = 1:n()) %>%
mutate(Time2 = min(Time[idx_alarm == 1]))
str(x_full)
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit) %>%
#mutate(time2 = 1:n()) %>%
mutate(Time2 = min(Time[idx_alarm == T]))
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit) %>%
#mutate(time2 = 1:n()) %>%
mutate(Time2 = min(Time[as.numeric(idx_alarm) == 1]))
## Group by time before failure
## ... and determine which percentage of the engines
## ... were beingt classified into each group at each point in time
x_full$time <- sensor_data$Time
x_full$idx_normal <- idx_normal
x_full$idx_warn <- idx_warn
x_full$idx_alarm <- numeric(idx_alarm9
s <-
x_full$time <- sensor_data$Time
x_full$idx_normal <- idx_normal
x_full$idx_warn <- idx_warn
x_full$idx_alarm <- numeric(idx_alarm)
x_full$time <- sensor_data$Time
x_full$idx_normal <- idx_normal
x_full$idx_warn <- idx_warn
x_full$idx_alarm <- as.numeric(idx_alarm)
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit) %>%
#mutate(time2 = 1:n()) %>%
mutate(Time2 = min(Time[idx_alarm == 1]))
x_full$time <- sensor_data$Time
x_full$idx_normal <- idx_normal
x_full$idx_warn <- idx_warn
x_full$idx_alarm <- as.numeric(idx_alarm)
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit, idx_alarm) %>%
mutate(Time2 = min(Time[idx_alarm == 1]))
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit, idx_alarm) %>%
mutate(Time2 = min(Time))
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit, idx_alarm) %>%
mutate(Time2 = min(Time)) %>%
group_by(Unit) %>%
mutate(Time2 = Time - Time2)
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit, idx_alarm) %>%
mutate(Time2 = min(Time)) %>%
group_by(Unit) %>%
mutate(Time2 = ifelse(max(Time2) == 1, 0, max(Time2))) %>%
mutate(Time2 = Time - Time2)
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit, idx_alarm) %>%
mutate(Time2 = min(Time)) %>%
group_by(Unit) %>%
mutate(Time2 = ifelse(max(Time2) == 1, 0, max(Time2)))
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit, idx_alarm) %>%
mutate(Time2 = min(Time))
str(/s)
str(s)
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit, idx_alarm) %>%
mutate(Time2 = min(Time)) %>%
data.frame()
str(s)
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit, idx_alarm) %>%
mutate(Time2 = min(Time)) %>%
data.frame() %>%
group_by(Unit) %>%
mutate(Time2 = ifelse(max(Time2) == 1, 0, max(Time2)))
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit, idx_alarm) %>%
mutate(Time2 = min(Time)) %>%
data.frame() %>%
group_by(Unit)
str(s)
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit, idx_alarm) %>%
mutate(Time2 = min(Time)) %>%
data.frame() %>%
group_by(Unit)
str(s)
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit, idx_alarm) %>%
mutate(Time2 = min(Time)) %>%
data.frame()
str(s)
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit, idx_alarm) %>%
mutate(Time2 = min(Time)) %>%
group_by(Unit) %>%
mutate(Time2 = ifelse(max(Time2) == 1, 0, max(Time2)))
install.packages("dplyr")
install.packages("dplyr")
column_names <- c(
'Unit',
'Time',
'Setting1',
'Setting2',
'Setting3',
'FanInletTemp',
'LPCOutletTemp',
'HPCOutletTemp',
'LPTOutletTemp',
'FanInletPres',
'BypassDuctPres',
'TotalHPCOutletPres',
'PhysFanSpeed',
'PhysCoreSpeed',
'EnginePresRatio',
'StaticHPCOutletPres',
'FuelFlowRatio',
'CorrFanSpeed',
'CorrCoreSpeed',
'BypassRatio',
'BurnerFuelAirRatio',
'BleedEnthalpy',
'DemandFanSpeed',
'DemandCorrFanSpeed',
'HPTCoolantBleed',
'LPTCoolantBleed'
)
sensor_data <-
read.table("CMAPSSData/train_FD001.txt",
col.names = column_names)
engine01 <- sensor_data[sensor_data$Unit == 1, ]
engine01 <- engine01[1:125, ]
head(engine01)
view_columns <- c(
'TotalHPCOutletPres',
'PhysFanSpeed',
'PhysCoreSpeed',
'StaticHPCOutletPres',
'FuelFlowRatio',
'CorrFanSpeed',
'CorrCoreSpeed',
'BypassRatio',
'BleedEnthalpy'
)
par(mfrow = c(3, 3))
for(ii in 1:9) {
plot(x = engine01$Time,
y = engine01[, 5+ii],
type = "l",
col = "deepskyblue3",
xlim = c(0, 125),
xaxs = "i",
main = colnames(engine01)[5+ii],
xlab = "Time",
ylab = "")
}
variable_names <- c(
'Unit',
'Time',
'LPCOutletTemp',
'HPCOutletTemp',
'LPTOutletTemp',
'TotalHPCOutletPres',
'PhysFanSpeed',
'PhysCoreSpeed',
'StaticHPCOutletPres',
'FuelFlowRatio',
'CorrFanSpeed',
'CorrCoreSpeed',
'BypassRatio',
'BleedEnthalpy',
'HPTCoolantBleed',
'LPTCoolantBleed'
)
engine01 = engine01[, variable_names]
k <- 4
engine01_smooth <- engine01
## Implementation of moving average with filling truncated areas
## First value remains the same
## Second to kth value is truncated, and averaged over values < k
for (i in 2:k) {
engine01_smooth[i, 3:ncol(engine01_smooth)] <-
apply(engine01[1:i, 3:ncol(engine01)], 2, mean)
}
for(i in (k+1):nrow(engine01_smooth)) {
engine01_smooth[i, 3:ncol(engine01_smooth)] <-
apply(engine01[(i-k):i, 3:ncol(engine01)], 2, mean)
}
## Remove truncated areas
engine01_smooth <- engine01_smooth[(k+2):nrow(engine01),]
head(engine01_smooth, 20)
par(mfrow = c(3, 3))
for(colname in view_columns) {
plot(x = engine01_smooth$Time,
y = engine01_smooth[, colname],
type = "l",
col = "deepskyblue3",
xlim = c(0, 125),
#ylim = c(552, 556),
xaxs = "i",
main = colname,
xlab = "Time",
ylab = "")
}
## Using correction factor 1.3 when computing standard error
plot(engine01$Time, engine01$LPCOutletTemp,
ylim = c(641.5, 643.5),
main = 'Control chart',
xlab = 'Time',
ylab = 'LPTOutletTemp',
pch = 16,
col = "blue"
)
lines(engine01$Time, engine01$LPCOutletTemp, col = "blue")
mean_temp <- mean(engine01$LPCOutletTemp)
stderror <- sd(engine01$LPCOutletTemp)/sqrt(1.3)
ucl <- mean_temp + stderror * 3
lcl <- mean_temp - stderror * 3
abline(mean_temp, 0, col = 'green')
abline(ucl, 0, col = 'red')
abline(lcl, 0, col = 'red')
points(engine01$Time[engine01$LPCOutletTemp > ucl],
engine01$LPCOutletTemp[engine01$LPCOutletTemp > ucl],
col = "red")
## All units already available in sensor_data
k <- 4
sensor_data_smooth <- c()
for (u in unique(sensor_data$Unit)) {
## Prepare data
data_temp <- sensor_data[sensor_data$Unit == u, variable_names]
data_temp <- data_temp[1:125,]
data_temp_smooth <- data_temp
## Implementation of moving average with filling truncated areas
## First value remains the same
## Second to kth value is truncated, and averaged over values < k
for (i in 2:k) {
data_temp_smooth[i, 3:ncol(data_temp_smooth)] <-
apply(data_temp[1:i, 3:ncol(data_temp)], 2, mean)
}
for(i in (k+1):nrow(data_temp_smooth)) {
data_temp_smooth[i, 3:ncol(data_temp_smooth)] <-
apply(data_temp[(i-k):i, 3:ncol(data_temp)], 2, mean)
}
## remove truncated areas
data_temp_smooth <- data_temp_smooth[(k+2):nrow(data_temp_smooth), ]
sensor_data_smooth <- rbind(sensor_data_smooth, data_temp_smooth)
}
head(sensor_data_smooth, 10)
par(mfrow = c(3, 3))
for (colname in view_columns) {
plot(x = sensor_data_smooth[sensor_data_smooth$Unit == 1, "Time"],
y = sensor_data_smooth[sensor_data_smooth$Unit == 1, colname],
type = "l",
xaxs = "i",
col = "deepskyblue3",
xlim = c(0, 125),
ylim = c(min(sensor_data_smooth[, colname], na.rm = T),
max(sensor_data_smooth[, colname], na.rm = T)),
main = colname,
xlab = "Time",
ylab = "")
for (u in unique(sensor_data_smooth$Unit)) {
lines(x = sensor_data_smooth[sensor_data_smooth$Unit == u, "Time"],
y = sensor_data_smooth[sensor_data_smooth$Unit == u, colname],
col = "deepskyblue3")
}
}
## Pull out just the sensor data, ignoring the unit and timestamp
xtrain <- sensor_data_smooth[, 3:ncol(sensor_data_smooth)]
## Give all sensors mean of zero and standard deviation of one
# xtrain_mean <- apply(xtrain, 2, mean)
# xtrain_sd <- apply(xtrain, 2, sd)
# xtrain_standard <- (xtrain - xtrain_mean) / xtrain_sd
xtrain_standard <- apply(xtrain, 2, function(x)
scale(x, center = T, scale = T))
#xtrain_standard <- scale(xtrain, center = T, scale = T)
# xtrain_standard <- apply(xtrain, 2, function(x)
#   (x - mean(x) ) / (sd(x) / length(x) ))
## Apply principal components analysis to the standardized data
## MATLAB's pca uses singular value decomposition (SVD)
## ... so R prcomp is appropriate (vs. princomp, which uses spectral decomposition)
pca <- prcomp(xtrain_standard)
pca_summary <- summary(pca)
## prcomp(xtrain_standard)[1] == princomp(xtrain_standard, cor = T)[1]
## Plot the total variance explained by each individual principal component
## ... along with the cumulative total that has been explained
plot(pca_summary$importance[3, 1:10] * 100,
# plot(cumsum(pca_summary$importance[2, 1:10])/sum(pca_summary$importance[2, ]) * 100,
pch = 16, col = 'blue',
ylim = c(0, 100),
main = 'Individual and cumulative variance explained by PCA',
xlab = "# of principal component",
ylab = '% of variance of dataset explained')
axis(side = 1, at = 1:10)
axis(side = 2, at = seq(0, 100, 10))
points(pca_summary$importance[2, 1:10] * 100, pch = 16, col = 'red')
# points(pca_summary$importance[2, 1:10]/sum(pca_summary$importance[2, ]) * 100, pch = 16, col = 'red')
## Visualize the first 2 principal components
## ... which explain nearly 90% of the overall variance
plot(pca$x[,1], pca$x[,2],
pch = 16,
cex = 0.3,
col = "deepskyblue3",
xlim = c(-10, 15),
ylim = c(-3, 7),
xlab = "First principal component",
ylab = "Second principal component")
## Save the needed variables to standardize new data
## ...and transform it into the same PCA projection
## Find first and last point for each engine
idx_first <- vapply(unique(sensor_data_smooth$Unit), function(x) min(which(sensor_data_smooth$Unit == x)), numeric(1))
idx_last <- vapply(unique(sensor_data_smooth$Unit), function(x) max(which(sensor_data_smooth$Unit == x)), numeric(1))
## Compute centroids
idx_first_cent <- colMeans(pca$x[idx_first, c(1, 2)])
idx_last_cent <- colMeans(pca$x[idx_last, c(1, 2)])
## Plot data
plot(pca$x[idx_first, 1], pca$x[idx_first, 2],
pch = 16, cex = 0.5,
col = "deepskyblue3",
xlim = c(-10, 15),
ylim = c(-3, 7),
main = 'First (Sample 1) and last (Sample 125) for each engine',
xlab = "First principal component",
ylab = "Second principal component")
points(pca$x[idx_last, 1], pca$x[idx_last, 2],
pch = 16, cex = 0.5, col = "red")
points(idx_first_cent[1], idx_first_cent[2],
pch = 16, cex = 1, col = "green3")
points(idx_last_cent[1], idx_last_cent[2],
pch = 16, cex = 1, col = "green3")
legend("topleft",
c("First points", "Last points",
"First points centered", "Last points centered"),
pch = 16, cex = 1,
col = c("deepskyblue3", "red", "green3", "green3"))
idx_problematic <- sensor_data_smooth$Unit %in% c(39, 57, 70, 91)
## Only last 20 cycles
idx_problematic <-
idx_problematic &
sensor_data_smooth$Time > (max(sensor_data_smooth$Time) - 20)
plot(pca$x[,1], pca$x[,2],
pch = 16,
cex = 0.5,
col = "deepskyblue3",
xlim = c(-10, 15),
ylim = c(-3, 7),
main = "Last 20 flights of problematic engines shown in red",
xlab = "First principal component",
ylab = "Second principal component")
points(pca$x[idx_problematic, 1], pca$x[idx_problematic, 2],
pch = 16, cex = 0.5, col = "red")
# Engines identified by maintenance: 39, 57, 70, 91
engine_num = 39
r <- which(sensor_data_smooth$Unit == engine_num)
plot(pca$x[,1], pca$x[,2],
pch = 16,
cex = 0.5,
col = "deepskyblue3",
xlim = c(-10, 15),
ylim = c(-3, 7),
main = paste("Engine", engine_num),
xlab = "First principal component",
ylab = "Second principal component")
lines(pca$x[r, 1], pca$x[r, 2],
lwd = 2, col = "green2")
points(pca$x[r[1], 1], pca$x[r[1], 2],
pch = 16, cex = 1, col = "yellow")
points(pca$x[r[length(r)], 1], pca$x[r[length(r)], 2],
pch = 16, cex = 1, col = "red")
idx_alarm <-
pca$x[, 1] > 10 |
pca$x[, 1] < -7 |
pca$x[, 2] > 5 |
pca$x[, 2] < -4
idx_warn <-
pca$x[, 1] > 5 |
pca$x[, 1] < -6.5 |
pca$x[, 2] > 2 |
pca$x[, 2] < -3
rectx_alarm <- c(-10, -10, 15, 15, 10, 10, -7, -7, -10)
recty_alarm <- c( -4,   8,  8, -4, -4,  5,  5, -4,  -4)
rectx_warn <- c(-7, -7, 10, 10,  5, 5, -6.5, -6.5,  4.99,  4.99, -6.5)
recty_warn <- c(-4,  5,  5, -4, -4, 2,  2,   -3,   -3,    -4,    -4)
rectx_normal <- c(-6.5, -6.5, 5,  5, -6.5)
recty_normal <- c(-3,    2,   2, -3, -3)
plot(NULL,
xlim = c(-10, 15),
ylim = c(-4, 8),
xaxs = "i",
yaxs = "i",
main = "Green = Normal, Orange = Warning, Red = Alarm",
xlab = "First principal component",
ylab = "Second principal component")
polygon(rectx_alarm, recty_alarm, col = rgb(237, 28, 36, 0.3*255, maxColorValue = 255))
polygon(rectx_warn, recty_warn, col = rgb(255, 255, 0, 0.3*255, maxColorValue = 255))
polygon(rectx_normal, recty_normal, col = rgb(0, 255, 64, 0.3*255, maxColorValue = 255))
points(pca$x[,1], pca$x[,2],
pch = 16,
cex = 0.3,
col = "deepskyblue3")
cat("\n Percent of points captured by \"normal\" conditions:",
sum(!idx_warn)/nrow(pca$x) * 100)
cat("\n Percent of points captured by \"normal\" + \"warn\" conditions:",
sum(!idx_alarm)/nrow(pca$x) * 100)
## Load in full dataset
## (available in sensor_data)
## Extract and standardize full sensor data
#x_full <- sensor_data[, 3:(ncol(sensor_data)-2)]
x_full <- sensor_data[, variable_names]
x_full[, 3:ncol(x_full)] <- scale(x_full[, 3:ncol(x_full)], center = T, scale = T)
x_full <- as.data.frame(x_full)
## Project full sensor data onto prncipal coordinates
#score <- x_full *pca$rotation
score <- predict(pca, x_full[, 3:ncol(x_full)])
## Classify each point into "normal", "warning", and "alarm"
idx_alarm <-
score[, 1] > 10 |
score[, 1] < -7 |
score[, 2] > 5 |
score[, 2] < -4
idx_warn <-
score[, 1] > 5 |
score[, 1] < -6.5 |
score[, 2] > 2 |
score[, 2] < -3
idx_normal <- !idx_warn & ! idx_alarm
## Group by time before failure
## ... and determine which percentage of the engines
## ... were beingt classified into each group at each point in time
x_full$time <- sensor_data$Time
x_full$idx_normal <- idx_normal
x_full$idx_warn <- idx_warn
x_full$idx_alarm <- as.numeric(idx_alarm)
s <-
x_full %>%
arrange(Unit, Time) %>%
group_by(Unit, idx_alarm) %>%
mutate(Time2 = min(Time)) %>%
group_by(Unit) %>%
mutate(Time2 = ifelse(max(Time2) == 1, 0, max(Time2)))
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
library(dplyr)
install.packages("Rcpp")
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("magittr")
install.packages("magrittr")
library(dplyr)
library(dplyr)
library(magrittr)
library(dplyr)
libary(dplyr)
library(dplyr)
library(dplyr)
